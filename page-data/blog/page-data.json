{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Johnathan Gilday"},"blogTitle":"/ gilday / blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"I get more than my fair share of spam. Of course, I ‚Äúmark as spam‚Äù, but then I\nalso report the sender to both their email provider and their‚Ä¶","fields":{"slug":"/blog/fight-the-spammers/"},"frontmatter":{"date":"November 11, 2023","title":"üìß Fight the Spammers","description":"This is my playbook for fighting back against the spammers (probably in vain).\n"}}},{"node":{"excerpt":"If you‚Äôre like me, you associate the java.nio package introduced in Java 1.7\nwith nonblocking IO. For years, I ignored the java.nio.file sub‚Ä¶","fields":{"slug":"/blog/java-nio-files/"},"frontmatter":{"date":"January 16, 2023","title":"‚òïÔ∏è Reasons to Prefer Java's New I/O for Working With Files","description":"When Java introduced the java.nio.file package for working with files (in version 1.7), Java did not deprecate the existing java.io.File type. Is there a reason to prefer one of these seemingly duplicative strategies for working with files? I argue there is.\n"}}},{"node":{"excerpt":"I recently had to process large XML documents in Java, so I reached for Java‚Äôs\nStreaming API for XML (StAX). The document had a long list of‚Ä¶","fields":{"slug":"/blog/stream-stax/"},"frontmatter":{"date":"December 15, 2022","title":"‚òïÔ∏è Connecting Java's Streaming API for XML (StAX) with Streams","description":"On one hand, Java developers love to work with streams of data using the `java.util.stream` package, because it is easy to apply transformations, filtering, and aggregation. On the other hand, the Streaming API for XML (StAX) makes reading XML streamwise easy, but there are no easy ways to filter, transform, and aggregate the data. How can a Java developer connect these two APIs to use the best of both?\n"}}},{"node":{"excerpt":"Some Maven users need to verify that their Java project is compatible with\nmultiple JDKs. Typically, users perform this testing by‚Ä¶","fields":{"slug":"/blog/maven-toolchain-tests/"},"frontmatter":{"date":"June 10, 2021","title":"ü¶â Testing Across JDKs with Maven Toolchains","description":"Maven users who want to test their Java projects against different JDKs often do so by re-running their Maven build with each such JDK. Maven's Toolchains plugin offers an alternative strategy for testing across JDKs.\n"}}},{"node":{"excerpt":"I work on a Java agent tool at Contrast Security that detects web application\nvulnerabilities at runtime. Recently, Contrast reported an XML‚Ä¶","fields":{"slug":"/blog/owasp-xxe-jaxb/"},"frontmatter":{"date":"September 16, 2020","title":"üîí XML External Entity Pitfalls With JAXB","description":"I spent a few weeks in \"Java XML Hell\", and I learned that securely parsing untrusted XML in Java is more difficult than it seems. Contrast Security published my research to its Security Influencers blog, and OWASP accepted my change request to remove misleading guidance from its XXE Cheat Sheet.\n"}}},{"node":{"excerpt":"Update 2021-10-13: AdoptOpenJDK has migrated to the Eclipse Foundation and is\nnow Temurin. This post has been updated to reflect this‚Ä¶","fields":{"slug":"/blog/macos-homebrew-openjdk/"},"frontmatter":{"date":"September 07, 2020","title":"üçé Installing and Managing Java on macOS","description":"Developers on macOS may feel more lost than usual when considering their options for installing Java. In my experience, using Homebrew to install Eclipse Temurin packages is the best general solution for installing Java on macOS.\n"}}},{"node":{"excerpt":"Let me use my first blog post to explain why I am blogging, why now, and why I\nam hosting the blog myself. Why Blog I am starting a software‚Ä¶","fields":{"slug":"/blog/hello-world/"},"frontmatter":{"date":"August 20, 2020","title":"üéâ Hello World!","description":"Let me use my first blog post to explain why I am blogging, why now, and why I am hosting the blog myself."}}}]}},"pageContext":{}},"staticQueryHashes":["2841359383","614056702"],"slicesMap":{}}